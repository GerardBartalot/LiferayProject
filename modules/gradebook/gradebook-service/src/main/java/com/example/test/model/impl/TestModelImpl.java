/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.example.test.model.impl;

import com.example.test.model.Test;
import com.example.test.model.TestModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Test service. Represents a row in the &quot;Test_Test&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TestModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TestImpl}.
 * </p>
 *
 * @author Gerard Bartalot
 * @see TestImpl
 * @generated
 */
@JSON(strict = true)
public class TestModelImpl extends BaseModelImpl<Test> implements TestModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a test model instance should use the <code>Test</code> interface instead.
	 */
	public static final String TABLE_NAME = "Test_Test";

	public static final Object[][] TABLE_COLUMNS = {
		{"testId", Types.BIGINT}, {"name", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"testDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"priority", Types.INTEGER},
		{"dueDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("testId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("testDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Test_Test (testId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null,testDate DATE null,status INTEGER,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,priority INTEGER,dueDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Test_Test";

	public static final String ORDER_BY_JPQL = " ORDER BY test.testId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Test_Test.testId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TESTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public TestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _testId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _testId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Test.class;
	}

	@Override
	public String getModelClassName() {
		return Test.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Test, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Test, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Test, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Test)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Test, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Test, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Test)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Test, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Test, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Test, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Test, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Test, Object>>();

			attributeGetterFunctions.put("testId", Test::getTestId);
			attributeGetterFunctions.put("name", Test::getName);
			attributeGetterFunctions.put("description", Test::getDescription);
			attributeGetterFunctions.put("testDate", Test::getTestDate);
			attributeGetterFunctions.put("status", Test::getStatus);
			attributeGetterFunctions.put("companyId", Test::getCompanyId);
			attributeGetterFunctions.put("groupId", Test::getGroupId);
			attributeGetterFunctions.put("userId", Test::getUserId);
			attributeGetterFunctions.put("userName", Test::getUserName);
			attributeGetterFunctions.put("createDate", Test::getCreateDate);
			attributeGetterFunctions.put("modifiedDate", Test::getModifiedDate);
			attributeGetterFunctions.put("priority", Test::getPriority);
			attributeGetterFunctions.put("dueDate", Test::getDueDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Test, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Test, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Test, ?>>();

			attributeSetterBiConsumers.put(
				"testId", (BiConsumer<Test, Long>)Test::setTestId);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Test, String>)Test::setName);
			attributeSetterBiConsumers.put(
				"description", (BiConsumer<Test, String>)Test::setDescription);
			attributeSetterBiConsumers.put(
				"testDate", (BiConsumer<Test, Date>)Test::setTestDate);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Test, Integer>)Test::setStatus);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Test, Long>)Test::setCompanyId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Test, Long>)Test::setGroupId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Test, Long>)Test::setUserId);
			attributeSetterBiConsumers.put(
				"userName", (BiConsumer<Test, String>)Test::setUserName);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Test, Date>)Test::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate", (BiConsumer<Test, Date>)Test::setModifiedDate);
			attributeSetterBiConsumers.put(
				"priority", (BiConsumer<Test, Integer>)Test::setPriority);
			attributeSetterBiConsumers.put(
				"dueDate", (BiConsumer<Test, Date>)Test::setDueDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getTestId() {
		return _testId;
	}

	@Override
	public void setTestId(long testId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testId = testId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public Date getTestDate() {
		return _testDate;
	}

	@Override
	public void setTestDate(Date testDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_testDate = testDate;
	}

	@JSON
	@Override
	public Integer getStatus() {
		return _status;
	}

	@Override
	public void setStatus(Integer status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Integer getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(Integer priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Test.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Test toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Test>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TestImpl testImpl = new TestImpl();

		testImpl.setTestId(getTestId());
		testImpl.setName(getName());
		testImpl.setDescription(getDescription());
		testImpl.setTestDate(getTestDate());
		testImpl.setStatus(getStatus());
		testImpl.setCompanyId(getCompanyId());
		testImpl.setGroupId(getGroupId());
		testImpl.setUserId(getUserId());
		testImpl.setUserName(getUserName());
		testImpl.setCreateDate(getCreateDate());
		testImpl.setModifiedDate(getModifiedDate());
		testImpl.setPriority(getPriority());
		testImpl.setDueDate(getDueDate());

		testImpl.resetOriginalValues();

		return testImpl;
	}

	@Override
	public Test cloneWithOriginalValues() {
		TestImpl testImpl = new TestImpl();

		testImpl.setTestId(this.<Long>getColumnOriginalValue("testId"));
		testImpl.setName(this.<String>getColumnOriginalValue("name"));
		testImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		testImpl.setTestDate(this.<Date>getColumnOriginalValue("testDate"));
		testImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		testImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		testImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		testImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		testImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		testImpl.setCreateDate(this.<Date>getColumnOriginalValue("createDate"));
		testImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		testImpl.setPriority(this.<Integer>getColumnOriginalValue("priority"));
		testImpl.setDueDate(this.<Date>getColumnOriginalValue("dueDate"));

		return testImpl;
	}

	@Override
	public int compareTo(Test test) {
		long primaryKey = test.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Test)) {
			return false;
		}

		Test test = (Test)object;

		long primaryKey = test.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Test> toCacheModel() {
		TestCacheModel testCacheModel = new TestCacheModel();

		testCacheModel.testId = getTestId();

		testCacheModel.name = getName();

		String name = testCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			testCacheModel.name = null;
		}

		testCacheModel.description = getDescription();

		String description = testCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			testCacheModel.description = null;
		}

		Date testDate = getTestDate();

		if (testDate != null) {
			testCacheModel.testDate = testDate.getTime();
		}
		else {
			testCacheModel.testDate = Long.MIN_VALUE;
		}

		Integer status = getStatus();

		if (status != null) {
			testCacheModel.status = status;
		}

		testCacheModel.companyId = getCompanyId();

		testCacheModel.groupId = getGroupId();

		testCacheModel.userId = getUserId();

		testCacheModel.userName = getUserName();

		String userName = testCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			testCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			testCacheModel.createDate = createDate.getTime();
		}
		else {
			testCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			testCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			testCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Integer priority = getPriority();

		if (priority != null) {
			testCacheModel.priority = priority;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			testCacheModel.dueDate = dueDate.getTime();
		}
		else {
			testCacheModel.dueDate = Long.MIN_VALUE;
		}

		return testCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Test, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Test, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Test, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Test)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Test>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Test.class, ModelWrapper.class);

	}

	private long _testId;
	private String _name;
	private String _description;
	private Date _testDate;
	private Integer _status;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Integer _priority;
	private Date _dueDate;

	public <T> T getColumnValue(String columnName) {
		Function<Test, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Test)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("testId", _testId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("testDate", _testDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("dueDate", _dueDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("testId", 1L);

		columnBitmasks.put("name", 2L);

		columnBitmasks.put("description", 4L);

		columnBitmasks.put("testDate", 8L);

		columnBitmasks.put("status", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("groupId", 64L);

		columnBitmasks.put("userId", 128L);

		columnBitmasks.put("userName", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		columnBitmasks.put("priority", 2048L);

		columnBitmasks.put("dueDate", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Test _escapedModel;

}